require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DocumentsController, type: :controller do

  describe "GET #show" do
    context 'when requested document exists' do
      let(:document) { FactoryGirl.create(:document) }
      before(:each) { get :show, id: document.id }

      it 'success' do
        expect(response).to be_success
      end

      it 'assigns it to @document' do
        expect(assigns(:document)).to eq document
      end
    end
  end

  describe "GET #new" do
    login_user
    it "assigns a new document as @document" do
      get :new#, {}, valid_session
      expect(assigns(:document)).to be_a_new(Document)
    end
  end

  describe "GET #edit" do
    login_user
    context 'when requested document exists' do
      let(:document) { FactoryGirl.create(:document) }
      before(:each) { get :edit, id: document.id }

      it "assigns the requested document as @document" do
        get :edit, {:id => document.to_param}
        expect(assigns(:document)).to eq(document)
      end
    end
  end

  describe "GET #index" do
    let(:document) { FactoryGirl.create(:document) }
    it "assigns all documents as @documents" do
      get :index, params: {}
      expect(assigns(:documents)).to eq([document])
    end
  end

  describe "DELETE #destroy" do
    login_user
    it "destroys the requested document" do
      document = FactoryGirl.create(:document)
      expect {
        delete :destroy, {:id => document.to_param}
      }.to change(Document, :count).by(-1)
    end

    it "redirects to the agencies list" do
      document = FactoryGirl.create(:document)
      delete :destroy, {:id => document.to_param}
      expect(response).to redirect_to(documents_url)
    end
  end
end
